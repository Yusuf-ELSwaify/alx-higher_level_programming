``1-my_list`` module test cases
===================================

Importing the function from the module:
	>>> MyList = __import__('1-my_list').MyList

test function type:
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

test print empty list:
    >>> print(my_list)
    []

test sort empty list:
    >>> my_list.print_sorted()
    []

test print list:
    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

test when append:
    >>> my_list.append(4)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 2, 3, 4, 5]

test remove:
    >>> my_list.remove(5)
    >>> print(my_list)
    [1, 2, 3, 4]

test update:
    >>> my_list[0] = 20
    >>> print(my_list)
    [20, 2, 3, 4]

test print sorted:
    >>> my_list.print_sorted()
    [2, 3, 4, 20]

test list string:
    >>> my_list = MyList(['z', 'a', 'b', 'c'])
    >>> print(my_list)
    ['z', 'a', 'b', 'c']

test print string list sorted:
    >>> my_list.print_sorted()
    ['a', 'b', 'c', 'z']

test pass two lists:
    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    ...
    TypeError: list expected at most 1 argument, got 2


test pass None:
    >>> my_list = MyList(None)
    Traceback (most recent call last):
    ...
    TypeError: 'NoneType' object is not iterable
